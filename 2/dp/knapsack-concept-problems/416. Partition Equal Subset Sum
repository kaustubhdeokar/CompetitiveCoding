class Solution {
    public boolean canPartition(int[] nums) {
        
        int sum = 0;
        
        for(int i:nums)
            sum+=i;
        
        if(sum%2!=0)
            return false;

        int[][] dp = new int[nums.length+1][sum/2+1];
        for(int i=0;i<=nums.length;i++)
            Arrays.fill(dp[i],-1);
        
        if(findSubset(dp,nums,0,sum/2)==sum/2)
        return true;
        else 
        return false;
        
    }
    
     public int findSubset(int[][] dp, int[] arr, int index, int sum){
        
        if(index >= arr.length || sum <= 0)
            return 0;

        if(dp[index][sum]!=-1)
            return dp[index][sum];  

        if(arr[index]<=sum){
            dp[index][sum] = Integer.max(arr[index]+findSubset(dp,arr,index+1,sum-arr[index]),
                                                    findSubset(dp,arr,index+1,sum));
        }
        else{
            dp[index][sum] = findSubset(dp,arr,index+1,sum);
        }

        return dp[index][sum];
    }
    
}
